<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - LB</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <style>
        * {
            box-sizing: border-box; 
        }
        .error-message {
            color: #ef4444;
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: none;
        }
        .glass-card {
            background: rgba(17, 24, 39, 0.85);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        @media (max-width: 767px) {
            .image-upload-container {
                flex-direction: column !important;
                gap: 1rem !important;
            }
            .image-upload-slot {
                width: 8rem !important;
                height: 8rem !important;
            }
            .crop-modal {
                max-width: 90vw !important;
            }
            .crop-modal-buttons {
                flex-direction: column !important;
                gap: 0.5rem !important;
            }
            .form-input,
            .form-select,
            .form-textarea {
                min-height: 2.75rem; /* Ensure touch target ≥44px */
                padding: 0.75rem !important;
            }
            .radio-label {
                min-height: 2.75rem; /* Ensure touch target ≥44px */
                display: flex;
                align-items: center;
            }
            .submit-button {
                width: 100% !important;
            }
            .form-grid {
                gap: 1.5rem !important; /* More spacing on mobile */
            }
        }
    </style>
</head>

<body class="bg-gray-900 text-white min-h-screen">
    <%- include('../../views/partials/admin/navbar') %>

    <div class="flex h-screen pt-16">
        <%- include('../../views/partials/admin/sidebar') %>
        
        <div class="flex-1 ml-0 md:ml-64 p-4 sm:p-6 max-w-7xl mx-auto w-full overflow-x-hidden">
            <h1 class="text-xl sm:text-2xl font-bold mb-6">Edit Product</h1>

            <div class="glass-card p-4 sm:p-6 rounded-lg shadow-lg max-w-5xl mx-auto w-full">
                <form id="editProductForm" enctype="multipart/form-data" action="/admin/edit-productItem" method="POST" 
                      class="grid grid-cols-1 md:grid-cols-2 gap-6 form-grid">
                    <input type="hidden" name="productId" value="<%= product._id %>">
                    <input type="hidden" name="existingImages" id="existingImages" 
                           value="<%= JSON.stringify(product.productImage) %>">

                    <div class="md:col-span-2">
                        <label class="block mb-2 text-sm sm:text-base font-semibold">Product Images:</label>
                        <div class="flex gap-4 image-upload-container">
                            <% for (let i=1; i <=3; i++) { %>
                                <div class="relative group">
                                    <div class="w-24 h-24 border-2 border-gray-500 rounded-lg bg-gray-700 flex items-center justify-center overflow-hidden cursor-pointer image-upload-slot"
                                        onclick="document.getElementById('imageUpload<%= i %>').click()">
                                        <% if (product.productImage[i-1]) { %>
                                            <img id="imagePreview<%= i %>" src="<%= product.productImage[i-1] %>"
                                                class="w-full h-full object-cover">
                                            <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition">
                                                <span class="text-white text-sm">Change</span>
                                            </div>
                                        <% } else { %>
                                            <div id="noImageText<%= i %>" class="text-gray-400 text-center p-2">
                                                <svg class="w-8 h-8 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                                    </path>
                                                </svg>
                                                <span class="text-xs">Image <%= i %></span>
                                            </div>
                                        <% } %>
                                        <input type="file" name="images<%= i %>" id="imageUpload<%= i %>" class="hidden" 
                                               accept="image/*" data-index="<%= i %>">
                                        <input type="hidden" name="croppedImage<%= i %>" id="croppedImage<%= i %>">
                                    </div>
                                </div>
                            <% } %>
                        </div>
                        <div id="image-error" class="error-message"></div>
                    </div>

                    <div class="grid grid-cols-1 gap-4">
                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Product Name:</label>
                            <input type="text" name="name" id="name" value="<%= product.productName %>"
                                class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-sm sm:text-base form-input">
                            <div id="name-error" class="error-message"></div>
                        </div>

                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Description:</label>
                            <textarea name="description" id="description"
                                class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-sm sm:text-base form-textarea" rows="3"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Brand:</label>
                            <select name="brand" id="brand"
                                class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-white text-sm sm:text-base form-select">
                                <option value="">Select a brand</option>
                                <% brands.forEach(watch=> { %>
                                    <option value="<%= watch._id %>" <%=product.brand._id.equals(watch._id) ? 'selected' : '' %>>
                                        <%= watch.brandName %>
                                    </option>
                                <% }) %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Category:</label>
                            <select name="category" id="category"
                                class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-white text-sm sm:text-base form-select">
                                <option value="gents" <%=product.category==='gents' ? 'selected' : '' %>>Gents</option>
                                <option value="ladies" <%=product.category==='ladies' ? 'selected' : '' %>>Ladies</option>
                                <option value="couples" <%=product.category==='couples' ? 'selected' : '' %>>Couples</option>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Regular Price:</label>
                            <input type="number" name="amount" id="amount" value="<%= product.regularPrice %>"
                                class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-sm sm:text-base form-input" step="0.01" min="0">
                            <div id="amount-error" class="error-message"></div>
                        </div>

                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Offer (%):</label>
                            <div class="relative">
                                <input type="number" name="discount" id="discount" value="<%= product.discount %>"
                                    class="w-full p-2 rounded bg-gray-700 border border-gray-600 pr-8 text-sm sm:text-base form-input" min="0"
                                    max="100" step="0.01" placeholder="0-100">
                                <span class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400">%</span>
                            </div>
                            <div id="discount-error" class="error-message"></div>
                        </div>

                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Sale Price:</label>
                            <input type="number" name="saleAmount" id="salesAmount" value="<%= product.salePrice %>"
                                class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-sm sm:text-base form-input" step="0.01" min="0">
                            <div id="salesAmount-error" class="error-message"></div>
                        </div>

                        <div>
                            <label class="block mb-1 text-sm sm:text-base">Stock Quantity:</label>
                            <input type="number" name="stock" id="stock" value="<%= product.quantity %>"
                                class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-sm sm:text-base form-input">
                            <div id="stock-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div class="flex flex-col">
                            <label class="block mb-1 text-sm sm:text-base">Featured Product:</label>
                            <div class="flex gap-4">
                                <label class="flex items-center radio-label">
                                    <input type="radio" name="featured" value="yes"
                                        class="mr-2 h-4 w-4 text-green-500 focus:ring-green-500"
                                        <%=product.isFeatured ? 'checked' : '' %>>
                                    <span class="text-sm sm:text-base">Yes</span>
                                </label>
                                <label class="flex items-center radio-label">
                                    <input type="radio" name="featured" value="no"
                                        class="mr-2 h-4 w-4 text-green-500 focus:ring-green-500"
                                        <%=!product.isFeatured ? 'checked' : '' %>>
                                    <span class="text-sm sm:text-base">No</span>
                                </label>
                            </div>
                            <div id="featured-error" class="error-message"></div>
                        </div>

                        <div class="flex flex-col">
                            <label class="block mb-1 text-sm sm:text-base">New Product:</label>
                            <div class="flex gap-4">
                                <label class="flex items-center radio-label">
                                    <input type="radio" name="new" value="yes"
                                        class="mr-2 h-4 w-4 text-green-500 focus:ring-green-500" <%=product.isNew ? 'checked' : '' %>>
                                    <span class="text-sm sm:text-base">Yes</span>
                                </label>
                                <label class="flex items-center radio-label">
                                    <input type="radio" name="new" value="no"
                                        class="mr-2 h-4 w-4 text-green-500 focus:ring-green-500" <%=!product.isNew ? 'checked' : '' %>>
                                    <span class="text-sm sm:text-base">No</span>
                                </label>
                            </div>
                            <div id="new-error" class="error-message"></div>
                        </div>
                    </div>

                    <div>
                        <label class="block mb-1 text-sm sm:text-base">Color:</label>
                        <input type="text" name="color" id="color" value="<%= product.color %>"
                            class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-sm sm:text-base form-input">
                        <div id="color-error" class="error-message"></div>
                    </div>

                    <div class="md:col-span-2 flex justify-center">
                        <button type="submit" id="submitButton"
                            class="relative overflow-hidden bg-green-500 text-black px-6 py-2 rounded-lg hover:bg-green-600 transition text-sm sm:text-base submit-button">
                            UPDATE PRODUCT
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div id="cropModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden z-50">
        <div class="bg-white p-4 rounded-lg w-[450px] max-w-full shadow-lg crop-modal">
            <h2 class="text-black text-xl mb-4">Crop Image</h2>
            <div>
                <img id="cropImage" style="max-width: 65%;">
            </div>
            <div class="mt-4 flex justify-end crop-modal-buttons">
                <button id="cancelCrop" class="bg-gray-500 text-white px-4 py-2 rounded w-full sm:w-auto">Cancel</button>
                <button id="cropButton" class="bg-blue-500 text-white px-4 py-2 rounded w-full sm:w-auto mt-2 sm:mt-0 sm:ml-2">Crop</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Sidebar toggle
            const menuBtn = document.getElementById('menu-btn');
            const sidebar = document.getElementById('sidebar');

            menuBtn.addEventListener('click', () => {
                sidebar.classList.toggle('-translate-x-full');
            });

            function handleResize() {
                if (window.innerWidth >= 768) {
                    sidebar.classList.remove('-translate-x-full');
                } else {
                    sidebar.classList.add('-translate-x-full');
                }
            }

            window.addEventListener('resize', handleResize);
            handleResize();

            let isSubmitting = false;
            const submitButton = document.getElementById("submitButton");
            const form = document.getElementById("editProductForm");
            let cropper;
            let currentImageIndex;

            let existingImages = [];
            try {
                const existingImagesValue = document.getElementById('existingImages').value;
                existingImages = JSON.parse(existingImagesValue);
            } catch (e) {
                console.error("Error parsing existing images:", e);
                existingImages = [];
            }

            function setupDiscountHandling() {
                const amountInput = document.getElementById('amount');
                const discountInput = document.getElementById('discount');
                const salesAmountInput = document.getElementById('salesAmount');

                function calculateSalePrice() {
                    const amount = parseFloat(amountInput.value);
                    const discount = parseFloat(discountInput.value);

                    if (!isNaN(amount) && !isNaN(discount)) {
                        const salePrice = amount * (1 - (discount / 100));
                        salesAmountInput.value = salePrice.toFixed(2);
                    }
                }

                amountInput.addEventListener('input', calculateSalePrice);
                discountInput.addEventListener('input', calculateSalePrice);

                calculateSalePrice();
            }
            setupDiscountHandling();

            function handleImageUpload(event, index) {
                const file = event.target.files[0];
                if (!file) return;

                if (!['image/jpeg', 'image/png', 'image/webp'].includes(file.type)) {
                    displayErrorMessage("image-error", "Only JPG, PNG, or WEBP files are allowed");
                    event.target.value = '';
                    return;
                }

                currentImageIndex = index;
                const reader = new FileReader();
                reader.onload = function (e) {
                    if (cropper) {
                        cropper.destroy();
                    }

                    const cropImage = document.getElementById('cropImage');
                    cropImage.src = e.target.result;

                    document.getElementById('cropModal').classList.remove('hidden');

                    cropper = new Cropper(cropImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 0.8,
                        responsive: true,
                        movable: true,
                        zoomable: true,
                        rotatable: true,
                        scalable: true,
                        guides: true,
                        center: true,
                        highlight: true,
                        background: false,
                        autoCrop: true,
                        restore: true,
                        checkCrossOrigin: false
                    });
                };
                reader.readAsDataURL(file);
            }

            document.getElementById("cropButton").addEventListener("click", function () {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas({
                        width: 800,
                        height: 800,
                        minWidth: 256,
                        minHeight: 256,
                        fillColor: '#fff'
                    });

                    canvas.toBlob((blob) => {
                        const reader = new FileReader();
                        reader.onload = function() {
                            document.getElementById(`croppedImage${currentImageIndex}`).value = reader.result;
                            
                            const preview = document.getElementById(`imagePreview${currentImageIndex}`);
                            if (preview) {
                                preview.src = reader.result;
                                preview.style.display = 'block';
                            }
                            
                            const noImageText = document.getElementById(`noImageText${currentImageIndex}`);
                            if (noImageText) noImageText.style.display = 'none';
                        };
                        reader.readAsDataURL(blob);
                    }, 'image/jpeg', 0.9);

                    closeCropper();
                }
            });

            document.getElementById("cancelCrop").addEventListener("click", function () {
                const fileInput = document.getElementById(`imageUpload${currentImageIndex}`);
                fileInput.value = '';
                closeCropper();
            });

            function closeCropper() {
                document.getElementById('cropModal').classList.add('hidden');
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
                const cropImage = document.getElementById('cropImage');
                if (cropImage) {
                    cropImage.src = '';
                }
            }

            for (let i = 1; i <= 3; i++) {
                const input = document.getElementById(`imageUpload${i}`);
                if (input) {
                    input.addEventListener('change', function (e) {
                        handleImageUpload(e, i);
                    });
                }
            }

            form.addEventListener("submit", async function (event) {
                event.preventDefault();

                if (isSubmitting) return;
                isSubmitting = true;

                submitButton.disabled = true;
                submitButton.innerHTML = `
                    <span class="flex items-center justify-center">
                        <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Updating...
                    </span>
                `;

                if (!validateForm()) {
                    isSubmitting = false;
                    submitButton.disabled = false;
                    submitButton.innerHTML = 'UPDATE PRODUCT';
                    return false;
                }
                
                try {
                    // Create FormData from the form
                    const formData = new FormData(form);
                    
                    // Send the form data using fetch
                    const response = await fetch('/admin/edit-productItem', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to update product');
                    }
                    
                    // Show toast notification for success
                    const toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });
                    
                    toast.fire({
                        icon: 'success',
                        title: 'Product updated successfully'
                    });
                    
                    // Redirect after toast is shown
                    setTimeout(() => {
                        window.location.href = "/admin/products";
                    }, 1000);
                    
                } catch (error) {
                    console.error('Error:', error);
                    
                    // Show toast notification for error
                    const toast = Swal.mixin({
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });
                    
                    toast.fire({
                        icon: 'error',
                        title: error.message || 'Failed to update product'
                    });
                } finally {
                    isSubmitting = false;
                    submitButton.disabled = false;
                    submitButton.innerHTML = 'UPDATE PRODUCT';
                }
            });

            function validateForm() {
                clearErrorMessages();
                const name = document.getElementById('name').value.trim();
                const description = document.getElementById('description').value.trim();
                const brand = document.getElementById("brand").value.trim();
                const category = document.getElementById('category').value.trim();
                const amount = document.getElementById("amount").value.trim();
                const salesAmount = document.getElementById("salesAmount").value.trim();
                const stock = document.getElementById("stock").value.trim();
                const discount = document.getElementById("discount").value.trim();
                const color = document.getElementById('color').value.trim();

                const featuredSelected = document.querySelector('input[name="featured"]:checked');
                const newSelected = document.querySelector('input[name="new"]:checked');

                const categoryMatch = /^(gents|ladies|couples)$/i;
                const nameRegex = /^[A-Z][a-zA-Z0-9\s]*$/;
                const allowedImageTypes = ['image/jpeg', 'image/png', 'image/webp'];

                let isValid = true;
                let hasAtLeastOneImage = false;

                for (let i = 1; i <= 3; i++) {
                    const input = document.getElementById(`imageUpload${i}`);
                    const preview = document.getElementById(`imagePreview${i}`);
                    const noImageText = document.getElementById(`noImageText${i}`);

                    if ((input && input.files.length > 0) || (preview && preview.src) || 
                        (existingImages[i-1] && !noImageText)) {
                        hasAtLeastOneImage = true;

                        if (input.files.length > 0) {
                            const file = input.files[0];
                            if (!allowedImageTypes.includes(file.type)) {
                                displayErrorMessage("image-error", `Image ${i}: Only JPG, PNG, or WEBP files are allowed`);
                                isValid = false;
                            }
                        }
                    }
                }

                if (!hasAtLeastOneImage) {
                    displayErrorMessage("image-error", "At least one product image is required");
                    isValid = false;
                }

                if (!name) {
                    displayErrorMessage("name-error", "Please enter a name");
                    isValid = false;
                } else if (!nameRegex.test(name)) {
                    displayErrorMessage("name-error", "Product name should start with a capital letter");
                    isValid = false;
                }

                if (!description) {
                    displayErrorMessage("description-error", "Please enter a description");
                    isValid = false;
                } else if (description.length < 10) {
                    displayErrorMessage("description-error", "Description should be at least 10 characters long");
                    isValid = false;
                }

                if (!brand) {
                    displayErrorMessage("brand-error", "Please select a brand");
                    isValid = false;
                }

                if (!categoryMatch.test(category)) {
                    displayErrorMessage("category-error", "Please select a valid category");
                    isValid = false;
                }

                const amountNum = parseFloat(amount);
                if (!amount || isNaN(amountNum) || amountNum <= 0) {
                    displayErrorMessage("amount-error", "Please enter a valid price greater than 0");
                    isValid = false;
                }

                const discountNum = parseFloat(discount);
                if (isNaN(discountNum) || discountNum < 0 || discountNum > 100) {
                    displayErrorMessage("discount-error", "Discount must be between 0% and 100%");
                    isValid = false;
                }

                if (salesAmount) {
                    const salesAmountNum = parseFloat(salesAmount);
                    if (isNaN(salesAmountNum)) {
                        displayErrorMessage("salesAmount-error", "Please enter a valid sale price");
                        isValid = false;
                    } else if (salesAmountNum >= amountNum) {
                        displayErrorMessage("salesAmount-error", "Sale price must be less than regular price");
                        isValid = false;
                    }
                }

                const stockNum = parseInt(stock);
                if (!stock || isNaN(stockNum) || stockNum < 0) {
                    displayErrorMessage("stock-error", "Please enter a valid stock quantity");
                    isValid = false;
                }

                if (!color) {
                    displayErrorMessage("color-error", "Please enter a color");
                    isValid = false;
                }

                if (!featuredSelected) {
                    displayErrorMessage("featured-error", "Please select featured status");
                    isValid = false;
                }

                if (!newSelected) {
                    displayErrorMessage("new-error", "Please select new product status");
                    isValid = false;
                }

                return isValid;
            }

            function displayErrorMessage(elementId, message) {
                const errorElement = document.getElementById(elementId);
                if (errorElement) {
                    errorElement.textContent = message;
                    errorElement.style.display = 'block';
                }
            }

            function clearErrorMessages() {
                document.querySelectorAll('.error-message').forEach(el => {
                    el.style.display = 'none';
                    el.textContent = '';
                });
            }

            const urlParams = new URLSearchParams(window.location.search);
            const errorMessage = urlParams.get('error');
            if (errorMessage) {
                // Show toast notification for error
                const toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                });
                
                toast.fire({
                    icon: 'error',
                    title: errorMessage
                });
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        });
    </script>
</body>
</html>