<header class="sticky top-0 z-50 bg-[#1F1F1F] shadow-md">
    <%- include('../../views/partials/user/header')%>
</header>

<body class="bg-[#1F1F1F] text-white min-h-screen">
    <div class="container mx-auto px-4 py-12 max-w-6xl">
        <!-- Header -->
        <div class="text-center mb-12">
            <h1 class="text-2xl md:text-3xl font-bold tracking-wider mb-2">SECURE PAYMENT</h1>
            <div class="w-20 h-1 bg-yellow-400 mx-auto"></div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div class="lg:col-span-2 bg-[#2A2A2A] rounded-xl p-8 shadow-lg">
                <h2 class="text-lg font-bold tracking-wider mb-6 flex items-center">
                    <span class="w-4 h-4 bg-yellow-400 rounded-full mr-3"></span>
                    CHOOSE PAYMENT METHOD
                </h2>

                <div class="space-y-6 max-w-lg mx-auto p-6 bg-[#1F1F1F] shadow rounded-xl">
                    <form action="/choose-payment" method="post" id="paymentForm">
                        <% if (subtotal - discountAmount - (couponDiscount || 0) + shipingCharge < 1000) { %>
                            <div class="border border-gray-700 rounded p-4 hover:border-yellow-400 transition-colors">
                                <label class="flex items-center space-x-3 cursor-pointer">
                                    <input type="radio" name="payment" value="cod" class="accent-yellow-400" checked
                                        onchange="togglePaymentDetails()" />
                                    <span class="font-medium">Cash on Delivery</span>
                                    <span class="ml-auto">ðŸ’µ</span>
                                </label>
                                <p class="text-sm text-yellow-400 mt-2 pl-7 hidden" id="codNote">
                                    Additional cash collection charge of â‚¹50 applies
                                </p>
                            </div>
                            <% } else { %>
                                <div class="border border-gray-700 rounded p-4 opacity-50 pointer-events-none">
                                    <label class="flex items-center space-x-3 cursor-not-allowed">
                                        <input type="radio" name="payment" value="cod" disabled
                                            class="accent-yellow-400" />
                                        <span class="font-medium">Cash on Delivery</span>
                                        <span class="ml-auto">ðŸ’µ</span>
                                    </label>
                                    <p class="text-sm text-red-400 mt-2 pl-7">
                                        Cash on Delivery available only for orders below â‚¹1000
                                    </p>
                                </div>
                                <% } %>


                                    <div
                                        class="border border-gray-700 rounded p-4 hover:border-yellow-400 transition-colors">
                                        <label class="flex items-center space-x-3 cursor-pointer">
                                            <input type="radio" name="payment" value="razorpay"
                                                class="accent-yellow-400" onchange="togglePaymentDetails()" />
                                            <span class="font-medium">Razor Pay</span>
                                            <img src="https://razorpay.com/assets/razorpay-logo.svg"
                                                class="w-8 h-8 ml-auto filter brightness-0 invert-[0.8]" />
                                        </label>
                                    </div>

                                    <div
                                        class="border border-gray-700 rounded p-4 hover:border-yellow-400 transition-colors">
                                        <label class="flex items-center space-x-3 cursor-pointer">
                                            <input type="radio" name="payment" value="wallet" class="accent-yellow-400"
                                                onchange="togglePaymentDetails()" <%=!canUseWallet ? 'disabled' : '' %>
                                            />
                                            <span class="font-medium">Wallet</span>
                                            <span class="ml-auto">ðŸ’°</span>
                                        </label>
                                        <div class="mt-2 pl-7">
                                            <p
                                                class="text-sm <%= walletBalance >= total ? 'text-green-400' : 'text-yellow-400' %>">
                                                Available balance: â‚¹<%= walletBalance.toFixed(2) %>
                                            </p>
                                            <% if (walletBalance < total) { %>
                                                <p class="text-sm text-red-400 mt-1">
                                                    Insufficient balance (â‚¹<%= (total - walletBalance).toFixed(2) %>
                                                        more needed)
                                                </p>
                                                <% } %>
                                        </div>
                                    </div>

                                    <div class="pt-6 text-center">
                                        <button type="submit" id="payBtn" class="w-full bg-yellow-500 hover:bg-yellow-600 text-black py-3 rounded 
                                font-semibold transition-colors">
                                            Continue to Payment
                                        </button>
                                    </div>
                    </form>
                </div>
            </div>

            <div class="bg-[#2A2A2A] rounded-xl p-8 shadow-lg h-fit sticky top-8">


                <h2 class="text-lg font-bold tracking-wider mt-6 mb-4 flex items-center">
                    <span class="w-4 h-4 bg-yellow-400 rounded-full mr-3"></span>
                    ORDER SUMMARY
                </h2>

                <div class="space-y-4 mb-6">
                    <div class="flex justify-between">
                        <span class="text-gray-400">Subtotal (<%= cartItems.length %> items)</span>
                        <span>â‚¹<%= subtotal.toFixed(2) %></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-400">Delivery</span>
                        <span class="text-white">â‚¹<%= shippingCharge.toFixed(2) %></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-400">Product Savings</span>
                        <span class="text-green-400">-â‚¹<%= discountAmount.toFixed(2) %></span>
                    </div>
                    <% if (typeof couponDiscount !=='undefined' && couponDiscount> 0) { %>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Coupon Discount</span>
                            <span class="text-green-400">-â‚¹<%= couponDiscount.toFixed(2) %></span>
                        </div>
                        <% } %>
                </div>

                <div class="border-t border-gray-700 pt-4">
                    <div class="flex justify-between text-lg font-bold">
                        <span>TOTAL</span>
                        <span>â‚¹<%= (subtotal - discountAmount - (couponDiscount || 0) + shippingCharge).toFixed(2) %>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function showToast(message, type = 'error') {
            document.querySelectorAll('.toast').forEach(el => el.remove());

            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.style.animation = 'fadeOut 0.5s forwards';
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        const toastStyles = document.createElement('style');
        toastStyles.textContent = `
            .toast {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 25px;
                border-radius: 5px;
                color: white;
                z-index: 1000;
                animation: slideIn 0.5s forwards;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                max-width: 400px;
                word-break: break-word;
            }
            .toast.error {
                background-color: #ff4444;
            }
            .toast.success {
                background-color: #00C851;
            }
            .toast.warning {
                background-color: #ffbb33;
            }
            @keyframes slideIn {
                from { 
                    transform: translateX(100%); 
                    opacity: 0;
                }
                to { 
                    transform: translateX(0); 
                    opacity: 1;
                }
            }
            @keyframes fadeOut {
                to { 
                    opacity: 0;
                    transform: translateY(-20px);
                }
            }
        `;
        document.head.appendChild(toastStyles);

        function togglePaymentDetails() {
            const codNote = document.getElementById('codNote');
            const selectedMethod = document.querySelector('input[name="payment"]:checked').value;
            const payBtn = document.getElementById('payBtn');

            if (codNote) {
                codNote.style.display = selectedMethod === 'cod' ? 'block' : 'none';
            }

            const buttonTexts = {
                'wallet': 'Pay with Wallet',
                'razorpay': 'Continue to Razorpay',
                'cod': 'Place Order'
            };
            payBtn.innerText = buttonTexts[selectedMethod] || 'Continue';
        }

        document.addEventListener('DOMContentLoaded', function () {
            const paymentForm = document.getElementById('paymentForm');
            const payBtn = document.getElementById('payBtn');

            paymentForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                const selectedMethod = document.querySelector('input[name="payment"]:checked').value;
                const originalBtnText = payBtn.innerHTML;
                payBtn.disabled = true;
                payBtn.innerHTML = '<span class="spinner">âŒ›</span> Processing...';

                try {
                    const response = await fetch('/choose-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            payment: selectedMethod
                        })
                    });

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        const errorText = await response.text();
                        throw new Error('Server returned unexpected response');
                    }

                    const data = await response.json();

                    if (!data.success) {
                        throw new Error(data.message || 'Payment processing failed');
                    }

                    if (selectedMethod === 'razorpay') {
                        const options = {
                            key: data.razorpay.key,
                            amount: data.razorpay.amount,
                            currency: data.razorpay.currency,
                            order_id: data.razorpay.order_id,
                            name: data.razorpay.name,
                            description: data.razorpay.description,
                            image: '/images/hand-watch - Copy.png',
                            handler: async function (razorpayResponse) {
                                payBtn.innerHTML = '<span class="spinner">âŒ›</span> Verifying...';

                                try {
                                    const verifyResponse = await fetch('/razorpay/verify', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            razorpay_payment_id: razorpayResponse.razorpay_payment_id,
                                            razorpay_order_id: razorpayResponse.razorpay_order_id,
                                            razorpay_signature: razorpayResponse.razorpay_signature,
                                            orderId: data.tempOrderId,
                                            paymentId: razorpayResponse.razorpay_payment_id
                                        })
                                    });

                                    const verifyData = await verifyResponse.json();

                                    if (verifyData.success) {
                                        window.location.href = `/paymentSuccess/${verifyData.orderId}`;
                                    } else {
                                        throw new Error(verifyData.message || 'Payment verification failed');
                                    }
                                } catch (error) {
                                    console.error('Verification error:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Verification Failed',
                                        text: error.message || 'Could not verify your payment',
                                        confirmButtonColor: '#d33'
                                    });
                                    payBtn.innerHTML = originalBtnText;
                                    payBtn.disabled = false;
                                }
                            },
                            prefill: data.razorpay.prefill,
                            theme: {
                                color: '#3399cc'
                            },
                            modal: {
                                ondismiss: function () {
                                    payBtn.innerHTML = originalBtnText;
                                    payBtn.disabled = false;
                                }
                            }
                        };

                        const rzp = new Razorpay(options);

                        rzp.on('payment.failed', function (response) {
                            console.error('Payment failed:', response.error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: response.error.description || 'Payment failed. Please try again.',
                                confirmButtonColor: '#d33'
                            });
                            payBtn.innerHTML = originalBtnText;
                            payBtn.disabled = false;
                        });

                        rzp.open();
                    }
                    else if (data.redirect) {
                        window.location.href = data.redirect;
                    }
                    else if (data.orderId) {
                        window.location.href = `/paymentSuccess/${data.orderId}`;
                    }
                    else {
                        throw new Error('Unexpected response from server');
                    }

                } catch (error) {
                    console.error('Payment error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Something went wrong. Please try again.',
                        confirmButtonColor: '#d33'
                    });
                    payBtn.innerHTML = originalBtnText;
                    payBtn.disabled = false;
                }
            });

            document.querySelectorAll('input[name="payment"]').forEach(radio => {
                radio.addEventListener('change', function () {
                    const payBtn = document.getElementById('payBtn');
                    const codNote = document.getElementById('codNote');

                    if (this.value === 'cod') {
                        payBtn.textContent = 'Place Order';
                        if (codNote) codNote.style.display = 'block';
                    }
                    else if (this.value === 'wallet') {
                        payBtn.textContent = 'Pay with Wallet';
                        if (codNote) codNote.style.display = 'none';
                    }
                    else if (this.value === 'razorpay') {
                        payBtn.textContent = 'Continue to Razorpay';
                        if (codNote) codNote.style.display = 'none';
                    }
                });
            });
        });

        const style = document.createElement('style');
        style.textContent = `
    .spinner {
        display: inline-block;
        animation: spin 1s linear infinite;
    }
    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
`;
        document.head.appendChild(style);
    </script>
</body>

<%- include('../../views/partials/user/footer') %>